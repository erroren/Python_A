# Python垃圾回收机制
# 采用计数机制为主，标记-清理和分代收集两种机制为辅
# 引用+1的情况
# 1.对象被创建时
# 2.对象被copy引用
# 3.对象作为参数，传入到函数中
# 4.对象作为子元素存储到容器中
# 引用-1的情况
# 1.对象名被销毁 del list1
# 2.对象引用被赋予新的对象
# 3.函数执行完成后,引用的参数
# 4.对象所在容器被销毁或从容器中删除
# 导入sys.getrefcount函数进行计数
# 优点:1.简单、直观  2.实时性，只要计数为0 就收回
# 缺点: 1.维护引用需要消耗一定的资源
#      2.循环引用是，无法回收。 会造成内存泄漏，可以引用标记-清理和分代收集解决
# 标记-清理
# 1.对执行删除操作后的每个引用-1，此时引用为0的放入死亡容器，不为0的放入存货容器
# 2.遍历存活容器，查看是否有对象引用调用了死亡容器中的对象，如果有就把其从死亡容器中取出放入存活容器
# 3.将死亡组所有对象删除

# 分代收集
# 1.新建的对象为0代
# 2.每执行一次标记-清理，存货的对象代数+1
# 3.代数越高，存活的越久，进行标记-删除的时间间隔越长。这个间隔成为阈值